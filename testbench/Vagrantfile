# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  # require minimum Vagrant version
  Vagrant.require_version ">= 2.2.18"

  config.vm.box = "ubuntu/focal64"
  config.vm.hostname = "TestSettlers"
  
  # per default the disk is 40 GB - we need a fraction, but Vagrant does not support shrinking the disk
  #config.vm.disk :disk, size: "20GB", primary: true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true

    vb.name = "TestSettlers"
  
    # Customize the amount of memory on the VM:
    vb.memory = "4096"
    
    # inspired by https://stackoverflow.com/questions/21986511/how-to-add-storage-settings-to-vagrant-file
    vb.customize ["storageattach", :id, "--storagectl", "IDE", "--port", "0", "--device", "0", "--type", "dvddrive", "--medium", "emptydrive"]
    vb.customize ["modifyvm", :id, "--boot1", "disk", "--boot2", "dvd", "--boot3", "none", "--boot4", "none"]
    vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
    #vb.customize ["modifyvm", :id, "--iconfile", "Appliance_Logo.png"]
    #vb.customize ["modifyvm", :id, "--graphicscontroller", "vboxsvga"] -- it seems vmsvga is the recommended adapter
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "playbook.yml"
    ansible.verbose = "vv"
  end
end
