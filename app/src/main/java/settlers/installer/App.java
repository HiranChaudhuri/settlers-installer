/*
 */
package settlers.installer;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import settlers.installer.ui.ConfigurationPanel;
import settlers.installer.ui.InstallSourcePicker;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.kohsuke.github.GHArtifact;
import org.kohsuke.github.GHObject;
import org.kohsuke.github.GHRelease;
import org.kohsuke.github.GHRepository;
import org.kohsuke.github.GHWorkflow;
import org.kohsuke.github.GHWorkflowRun;
import org.kohsuke.github.GitHub;
import org.kohsuke.github.GitHubBuilder;
import org.kohsuke.github.PagedIterable;
import org.kohsuke.github.PagedIterator;
import settlers.installer.model.Configuration;
import settlers.installer.model.GameVersion;
import settlers.installer.ui.GameList;

/**
 *
 * @author hiran
 */
public class App extends javax.swing.JFrame {
    private static final Logger log = LogManager.getLogger(App.class);

    private final javax.swing.ImageIcon iiFound = new javax.swing.ImageIcon(getClass().getResource("/images/done_outline_FILL0_wght400_GRAD0_opsz48.png"));
    private final javax.swing.ImageIcon iiMissing = new javax.swing.ImageIcon(getClass().getResource("/images/dangerous_FILL0_wght400_GRAD0_opsz48.png"));
    private final javax.swing.ImageIcon iiUpdate = new javax.swing.ImageIcon(getClass().getResource("/images/update_FILL0_wght400_GRAD0_opsz48.png"));
    
    private Configuration configuration;
    private GitHub github;
    private GameList gameList;
    
    // TODO: Play button should come like https://www.codejava.net/java-se/swing/how-to-create-drop-down-button-in-swing
    
    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        jProgressBar.setVisible(false);
        
        configuration = Configuration.load(Util.getConfigurationFile());
        try {
            github = new GitHubBuilder().withOAuthToken(configuration.getGithubToken(), configuration.getGithubUsername()).build();
        } catch (IOException e) {
            log.error("Could not initialize github client", e);
        }
        
        gameList = new GameList();
        add(gameList, new GridBagConstraints(3, 1, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
        checkFiles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lbIconGithub = new javax.swing.JLabel();
        lbGameFiles = new javax.swing.JLabel();
        lbIconSettlers = new javax.swing.JLabel();
        lbDataFiles = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbResultData = new javax.swing.JLabel();
        btInstallData = new javax.swing.JButton();
        buttonBar = new javax.swing.JPanel();
        jProgressBar = new javax.swing.JProgressBar();
        btPlay = new javax.swing.JButton();
        btOptions = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Settlers-Installer");
        setName("Settlers-Installer"); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lbIconGithub.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIconGithub.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GitHub-Mark-120px-plus.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 30;
        getContentPane().add(lbIconGithub, gridBagConstraints);

        lbGameFiles.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lbGameFiles.setText("Game files");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 30;
        getContentPane().add(lbGameFiles, gridBagConstraints);

        lbIconSettlers.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIconSettlers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/siedler3-helme-circle-120.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 30;
        getContentPane().add(lbIconSettlers, gridBagConstraints);

        lbDataFiles.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lbDataFiles.setText("Data Files");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 30;
        getContentPane().add(lbDataFiles, gridBagConstraints);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Welcome to settlers-remake, a clone of Bluebyteâ€™s Settlers III.");
        jLabel5.setAutoscrolls(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        getContentPane().add(lbResultData, gridBagConstraints);

        btInstallData.setBackground(java.awt.Color.orange);
        btInstallData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/download_for_offline_FILL0_wght400_GRAD0_opsz48.png"))); // NOI18N
        btInstallData.setText("Install Data");
        btInstallData.setBorderPainted(false);
        btInstallData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInstallDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        getContentPane().add(btInstallData, gridBagConstraints);

        buttonBar.setLayout(new java.awt.GridBagLayout());

        jProgressBar.setIndeterminate(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        buttonBar.add(jProgressBar, gridBagConstraints);

        btPlay.setBackground(new java.awt.Color(127, 255, 131));
        btPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play_arrow_FILL0_wght400_GRAD0_opsz48.png"))); // NOI18N
        btPlay.setToolTipText("Play game!");
        btPlay.setOpaque(true);
        btPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPlayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        buttonBar.add(btPlay, gridBagConstraints);

        btOptions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/menu_FILL0_wght400_GRAD0_opsz48.png"))); // NOI18N
        btOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOptionsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        buttonBar.add(btOptions, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(buttonBar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doInstallGame() {
        btInstallData.setEnabled(false);
        btPlay.setEnabled(false);
        btOptions.setEnabled(false);
        jProgressBar.setVisible(true);
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 0;
                try {

                    Util.installLatest(github);
                    
                } catch(Exception e) {
                    log.debug("Could not install game", e);
                    JOptionPane.showMessageDialog(App.this, "Something went wrong.");
                } finally {
                    btInstallData.setEnabled(true);
                    btPlay.setEnabled(true);
                    btOptions.setEnabled(true);
                    jProgressBar.setVisible(false);
                    
                    checkFiles();
                }
            }
        }).start();
    }
    
    private void btInstallDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInstallDataActionPerformed
        log.debug("btInstallDataActionPerformed(...)");
        btInstallData.setEnabled(false);
        btPlay.setEnabled(false);
        
        // check parameters
        InstallSourcePicker isp = new InstallSourcePicker();
        if (JOptionPane.showOptionDialog(this, isp, "Install Data files from...", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) == JOptionPane.OK_OPTION) {
            // do the needful
            String source = isp.getPath();
            log.debug("Will grab files from {}", source);
            File srcDir = new File(source);

            jProgressBar.setVisible(true);
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        if (Util.isGameFolder(srcDir)) {
                            log.debug("Want to copy files...");
                            FileUtils.copyDirectory(srcDir, Util.getDataFolder());
                            
                        } else if (Util.isInstallCD(srcDir)) {
                            log.debug("Want to install from CD");
                            Util.installFromCD(srcDir);
                        } else throw new Exception(String.format("Unknown source %s", srcDir));

                    } catch(Exception e) {
                        log.error("Could not install data from {}", srcDir, e);
                        JOptionPane.showMessageDialog(App.this, "Something went wrong.");
                    } finally {
                        btInstallData.setEnabled(true);
                        btPlay.setEnabled(true);
                        jProgressBar.setVisible(false);

                        checkFiles();
                    }
                }
            }).start();
        } else {
            btInstallData.setEnabled(true);
            btPlay.setEnabled(true);
            jProgressBar.setVisible(false);
            checkFiles();
        }
        

    }//GEN-LAST:event_btInstallDataActionPerformed

    private void btPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPlayActionPerformed
        log.debug("btPlayActionPerformed(...)");
        btInstallData.setEnabled(false);
        btPlay.setEnabled(false);
        jProgressBar.setVisible(true);
        setVisible(false);
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                int x = 0;
                try {

                    List<GameVersion> installedReleases = Util.getInstalledGames();
                    if (installedReleases != null && !installedReleases.isEmpty()) {
                        Util.runGame(installedReleases.get(0));
                    }
                } catch(Exception e) {
                    JOptionPane.showMessageDialog(App.this, "Something went wrong.");
                } finally {
                    btInstallData.setEnabled(true);
                    btPlay.setEnabled(true);
                    jProgressBar.setVisible(false);
                    setVisible(true);

                    checkFiles();
                }
            }
        }).start();
    }//GEN-LAST:event_btPlayActionPerformed

    private void btOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOptionsActionPerformed
        ConfigurationPanel cp = new ConfigurationPanel();
        cp.setData(configuration);
        if (JOptionPane.showOptionDialog(this, cp, "Preferences", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null)==JOptionPane.OK_OPTION) {
            configuration = cp.getData();
            configuration.save(Util.getConfigurationFile());
        }
    }//GEN-LAST:event_btOptionsActionPerformed

    private void checkFiles() {
        GameState gstate = null;
        try {
            gstate = haveGameFiles();
        } catch (Exception e) {
            log.warn("could not check game status", e);
        }
        
        boolean dataFiles = haveDataFiles();
        lbResultData.setIcon(dataFiles? iiFound: iiMissing);
        lbResultData.setVisible(dataFiles);
        btInstallData.setVisible(!dataFiles);
        
        btPlay.setVisible(dataFiles && (gstate != null) && (gstate != GameState.missing) );
        
        // Desktop.getDesktop().browseFileDirectory(Util.getVarFolder());
        // throws UnsupportedOperationException: The BROWSE_FILE_DIR action is not supported on the current platform!
        
//        try {
//            Desktop.getDesktop().browse(Util.getVarFolder().toURI());
//        } catch (Exception e) {
//            log.error("Could not browse", e);
//        }
    }
    
    public enum GameState {
        missing, old, latest
    }
    
    private void printCounts(GHRepository repository) {
        try {
            
            PagedIterable<GHRelease> releases = repository.listReleases();
            int count = 0;
            for(PagedIterator<GHRelease> iter = releases.iterator(); iter.hasNext(); ) {
                GHRelease i = iter.next();
                count++;
            }
            log.debug("counted {} releases", count);
            
            PagedIterable<GHArtifact> artifacts = repository.listArtifacts();
            count = 0;
            for (PagedIterator<GHArtifact> iter = artifacts.iterator(); iter.hasNext(); ) {
                GHArtifact i = iter.next();
                count++;
                //log.debug("Artifact {}", i);
            }
            log.debug("counted {} artifacts", count);
            
            PagedIterable<GHWorkflow> workflows = repository.listWorkflows();
            count = 0;
            for (PagedIterator<GHWorkflow> iter = workflows.iterator(); iter.hasNext(); ) {
                GHWorkflow i = iter.next();
                count++;
                //log.debug("Workflow {}", i);
                
                int count2 = 0;
                PagedIterable<GHWorkflowRun> workflowRuns = i.listRuns();
                for (PagedIterator<GHWorkflowRun> iter2 = workflowRuns.iterator(); iter2.hasNext(); ) {
                    GHWorkflowRun j = iter2.next();
                    //log.debug("  run: {}", j);
                    count2++;
                }
                log.debug("counted {} runs", count2);
            }
            log.debug("counted {} workflows", count);
            
        } catch (IOException e) {
            log.error("Could not list releases", e);
        }
    }
    
    /**
     * Returns true if some game is installed that we can run.
     * 
     * @return true if a game is installed, false otherwise
     */
    private GameState haveGameFiles() {
        log.debug("github anonymous: {}", github.isAnonymous());
        log.debug("github offline:   {}", github.isOffline());

        GHRepository repository = null;
        List<GHObject> availableGames = null;
        try {
            availableGames = Util.getAvailableGames(github, !configuration.isCheckArtifacts());
        } catch (IOException e) {
            log.error("Could not check online games", e);
        }
        gameList.setData(availableGames);
        
        List<GameVersion> installedGames = Util.getInstalledGames();
        if (installedGames != null && !installedGames.isEmpty()) {
            // check if updates are available

            try {
                Date installed = installedGames.get(0).getInstalledAt();
                if (installed == null) {
                    return GameState.old;
                }
                
                Date available = availableGames.get(0).getUpdatedAt();
                if (available == null) {
                    available = availableGames.get(0).getCreatedAt();
                }
                if (installed.before(available)) {
                    // update is available
                    log.debug("Update is available");
                    return GameState.old;
                } else {
                    // we already have the latest version
                    log.debug("we already have the latest version");
                    return GameState.latest;
                }
            } catch (Exception e) {
                // could not figure out if update is available. Let's assume we have the latest
                log.debug("We assume to have the latest version", e);
                return GameState.latest;
            }
        } else {
            log.debug("No good version installed locally");
            return GameState.missing;
        }
        
    }

    /**
     * Validated a S3 data folder.
     * 
     * @return true if data files seem ok, false otherwise
     */
    private boolean haveDataFiles() {
        File dir = Util.getDataFolder();
        
        if (!dir.isDirectory()) {
            log.warn("File {} is not a directory.", dir);
            return false;
        }
        if (dir.listFiles().length < 2) {
            log.warn("File {} contains too few files", dir);
            return false;
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        log.debug("main({})", Arrays.asList(args));
        log.debug("Full command line: {}", ProcessHandle.current().info().commandLine().orElse("n/a"));
        Util.dumpEnvironment();
        Util.dumpProperties(System.getProperties());
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                App app = new App();
                app.setLocationRelativeTo(null);
                app.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btInstallData;
    private javax.swing.JButton btOptions;
    private javax.swing.JButton btPlay;
    private javax.swing.JPanel buttonBar;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JLabel lbDataFiles;
    private javax.swing.JLabel lbGameFiles;
    private javax.swing.JLabel lbIconGithub;
    private javax.swing.JLabel lbIconSettlers;
    private javax.swing.JLabel lbResultData;
    // End of variables declaration//GEN-END:variables
}
