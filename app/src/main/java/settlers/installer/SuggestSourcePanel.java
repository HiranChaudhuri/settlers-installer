/*
 */
package settlers.installer;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author hiran
 */
public class SuggestSourcePanel extends javax.swing.JPanel {
    private final static Logger log = LogManager.getLogger(SuggestSourcePanel.class);
    
    boolean cancelled = false;
    private List<Pattern> skipList;
    private DefaultListModel<String> model;

    /**
     * Creates new form SuggestSourcePanel
     */
    public SuggestSourcePanel() {
        initComponents();
        jProgressBar1.setVisible(false);

        skipList = new ArrayList<>();
        skipList.add(Pattern.compile("/proc/.*"));
        skipList.add(Pattern.compile("/sys/.*"));
        skipList.add(Pattern.compile(".*/\\.SynologyDrive/.*"));
        skipList.add(Pattern.compile(".*/\\.wine/dosdevices.*"));
        
//        skipList.add(Pattern.compile("/dev/"));
//        skipList.add("/root");
//        skipList.add(".wine/dosdevices");
        
        model = new DefaultListModel<>();
        jList1.setModel(model);
    }
    
    private boolean shouldSkip(String path) {
        for (Pattern pattern: skipList) {
            if (pattern.matcher(path).matches()) {
                return true;
            }
        }
        return false;
    }
    
    /** Checks if a direcotry is either a Install CD or a S3 data directory.
     * If yes it adds the path to the locations box.
     * If not it scans on...
     * 
     * @param dir the directory to be scanned
     */
    private void scanDir(File dir) {
        if (dir == null) {
            return;
        }
        if (dir.toPath().getNameCount()>20) {
            //log.warn("Skipping too long path: {}", dir.getAbsoluteFile());
            return;
        }
        
        if (Util.isInstallCD(dir) || Util.isGameFolder(dir)) {
            String s = dir.getAbsolutePath();
            // only add if we do not have the entry already
            boolean found = false;
            for (int i=0;i<model.getSize() && !found;i++) {
                found |= s.equals(model.get(i));
            }
            
            if (!found) {
                model.addElement(dir.getAbsolutePath());
            }
            return;
        }
        
        // scan on...
        File[] entries = dir.listFiles();
        if (entries != null) {
            for (File entry: entries) {
                jLabel1.setText(entry.getAbsolutePath());
                try {
                    if (!".".equals(entry.getName()) && !"..".equals(entry.getName()) && !shouldSkip(entry.getCanonicalPath())) {
                        scanDir(entry);

                        if (cancelled) {
                            return;
                        }
                    }
                } catch (IOException e ) {
                    log.debug("could not investigate {}", entry, e);
                    // ignore exception and continue
                }
            }
        }
    }
    
    public void start() {
        cancelled = false;
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    File[] roots = File.listRoots();
                    for (File root: roots) {
                        log.debug("scanning {}", root);
                        scanDir(root);
                        
                        if (cancelled) {
                            break;
                        }
                        
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException ex) {
                        }
                    }

                    if (cancelled) {
                        break;
                    }
                }
                log.debug("scan ended");
                jProgressBar1.setIndeterminate(false);
                jProgressBar1.setVisible(false);
            }
        }).start();
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setVisible(true);
    }
    
    public void stop() {
        cancelled = true;
    }
    
    public String getSelectedPath() {
        return jList1.getSelectedValue();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
