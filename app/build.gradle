plugins {
    id 'application'                                     // this builds the application
    id 'pl.allegro.tech.build.axion-release'             // this is for version counting
    id 'checkstyle'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    // https://mvnrepository.com/artifact/com.owlike/genson
    implementation 'com.owlike:genson:1.6'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    // https://mvnrepository.com/artifact/org.apache.ant/ant
    implementation 'org.apache.ant:ant:1.10.12'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.11.0'
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.15'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-crypto
    implementation 'org.apache.commons:commons-crypto:1.1.0'
    // https://mvnrepository.com/artifact/org.kohsuke/github-api
    implementation 'org.kohsuke:github-api:1.306'
}

version = scmVersion.version
def inputDir = layout.buildDirectory.dir("jpackage_input")
def VENDOR = "Hiran"
def APPNAME = System.getProperty('APPNAME', 'SettlersRemake')

application {
    // Define the main class for the application.
    mainClass = 'settlers.installer.App'
}

/* This one declares the main-class in the manifest, but all the other jars
   are still missing on the classpath.
*/
jar {
    manifest {
        attributes(
            'Main-Class': 'settlers.installer.App',
            'Implementation-Title': APPNAME,
            'Implementation-Version': version,
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
//            'Build-Revision' : versioning.info.commit,
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}


tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

import org.apache.tools.ant.filters.ReplaceTokens

// create control, postinst and desktop files for Debian builds
task filterResourcesCopy1(type: Copy) {
    //outputs.dir('build/resources/jpackage')
    doNotTrackState("We just generate additional files")

    doFirst {
        layout.buildDirectory.dir('resources/jpackage')
    }

    from('src/jpackage/resources') {
        filter(ReplaceTokens, tokens: [
            APPLICATION_NAME: "${APPNAME} ${version}".toString(), 
            APPLICATION_VERSION: "${version}".toString(), 
            APPLICATION_DESCRIPTION: 'Wrapper project settlers-installer to easily use settlers-remake. See https://github.com/HiranChaudhuri/settlers-installer',
            APPLICATION_LAUNCHER: ("/opt/" + "${APPNAME}".toLowerCase() + "/bin/${APPNAME}").toString(),
            APPLICATION_ICON: ("/opt/" + "${APPNAME}".toLowerCase() + "/lib/${APPNAME}.png").toString(),
            DEPLOY_BUNDLE_CATEGORY: "Game".toString(),
            DESKTOP_MIMES: '',
            APPLICATION_StartupWMClass: 'settlers-installer-App',
            PACKAGE_NAME_LOWER: "${APPNAME}".toString().toLowerCase(),
            PACKAGE_NAME_NORMAL: "${APPNAME}".toString()
        ])
    }
    into layout.buildDirectory.dir('resources/jpackage')
    
    doLast {
        assert file("build/resources/jpackage/control").exists()
    }
}

// Create PKGINFO for Arch build
task filterResourcesCopy2(type: Copy) {
    //outputs.dir('build/resources/arch')
    doNotTrackState("We just generate additional files")

    doFirst {
        layout.buildDirectory.dir('resources/arch')
    }

    from('src/arch') {
        filter(ReplaceTokens, tokens: [
            APPLICATION_NAME: "${APPNAME} ${version}".toString(), 
            APPLICATION_VERSION: "${version}".toString(), 
            APPLICATION_ARCHVERSION: "${version}".toString().replace("-", "_"), 
            APPLICATION_DESCRIPTION: 'Wrapper project settlers-installer to easily use settlers-remake. See https://github.com/HiranChaudhuri/settlers-installer',
            APPLICATION_LAUNCHER: ("/opt/" + "${APPNAME}".toLowerCase() + "/bin/${APPNAME}").toString(),
            APPLICATION_ICON: ("/opt/" + "${APPNAME}".toLowerCase() + "/lib/${APPNAME}.png").toString(),
            DEPLOY_BUNDLE_CATEGORY: "Game".toString(),
            DESKTOP_MIMES: '',
            APPLICATION_StartupWMClass: 'settlers-installer-App',
            PACKAGE_NAME_LOWER: "${APPNAME}".toString().toLowerCase(),
            PACKAGE_NAME_NORMAL: "${APPNAME}".toString()
        ])
    }
    into layout.buildDirectory.dir('resources/arch')
    
    doLast {
        assert file("build/resources/arch/PKGINFO").exists()
    }
}

task jpackagePrepare(type: Copy, dependsOn: ['distZip']) {
    doFirst {
        mkdir inputDir
        exec {
            workingDir "."
            executable 'jpackage'
            args '--version'
        }
    }

    from(zipTree("build/distributions/app-${version}.zip"))
    into(inputDir)

    doLast {
        assert file("build/jpackage_input/app-${version}/lib/app-${version}.jar").exists()
    }
}

task jpackagePhase1(type: Exec, dependsOn: ['jpackagePrepare', 'filterResourcesCopy1', 'filterResourcesCopy2']) {
    doFirst {
         exec {
             workingDir "."
             executable 'find'
             args 'build'
         }
    }
    commandLine 'jpackage', '--type', 'app-image', '--dest', 'build/app-image', '-i', "build/jpackage_input/app-${version}/lib", '--main-jar', "app-${version}.jar", '--main-class', 'settlers.installer.App', '--name', "${APPNAME}", '--app-version', "${version}", '--description', 'Settlers 3 remake - see https://github.com/', '--vendor', "${VENDOR}", '--icon', 'build/resources/main/images/siedler3-helme-logo.png', '--resource-dir', 'build/resources/jpackage', '--jlink-options', '--strip-debug --no-man-pages --no-header-files'

    doLast {
        assert file("build/app-image/${APPNAME}/lib/app/app-${version}.jar").exists()
        assert file("build/app-image/${APPNAME}/lib/${APPNAME}.png").exists()
    }
}

// depend from creating jpackage resources, then copy desktop file
task jpackageInterfere(type: Copy, dependsOn: ['filterResourcesCopy1', 'filterResourcesCopy2']) {
    //outputs.dir('build/app-image/SettlersRemake/lib')
    doNotTrackState("We just generate additional files")

    from "build/resources/jpackage"
    into "build/app-image/${APPNAME}/lib"
    include "SettlersRemake.desktop"
    rename {
        "${APPNAME}.desktop"
    }

    doLast {
        assert file("build/app-image/${APPNAME}/lib/${APPNAME}.desktop").exists()
    }
}

task jpackagePhase2(type: Exec, dependsOn: ['jpackagePhase1', 'jpackageInterfere']) {
    commandLine 'jpackage', '--app-image', "build/app-image/${APPNAME}", '--name', "${APPNAME}", '--dest', 'build/distributions', '--resource-dir', 'build/resources/jpackage', '--vendor', "${VENDOR}"

    doFirst {
         exec {
             workingDir "."
             executable 'find'
             args 'build'
         }
         println "Executed!"
     }

    doLast {
        assert file("build/distributions/" + "${APPNAME}".toLowerCase() + "_1.0-1_amd64.deb").exists()
    }
}

task jpackage(description: "Build native installation package", dependsOn: ['jpackagePhase1', 'filterResourcesCopy1', 'filterResourcesCopy2', 'jpackagePhase2']) {
    doLast {
         exec {
             workingDir "."
             executable 'find'
             args 'build'
         }
         println "Executed!"
     }
}

gradle.taskGraph.whenReady { taskGraph ->
    compileJava.options.compilerArgs << "-Xlint:unchecked"
    compileJava.options.compilerArgs << "-Xlint:deprecation"
}

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

project.extensions.findByName('checkstyle').sourceSets.each { SourceSet s ->
    Checkstyle task = (Checkstyle) tasks.findByName(s.getTaskName('checkstyle', null));
    task.setSource(s.allSource);
    getLogger().info('Reconfigured task \'' + task.name +
        '\' to include all files in sourceSet \'' + s.name + '\'');
}
